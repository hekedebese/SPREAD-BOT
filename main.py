# main.py (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π ‚Äî –ø–æ–ª–Ω—ã–π)
import logging
import asyncio
import random
import time
from datetime import datetime, timezone, timedelta
from logging.handlers import TimedRotatingFileHandler
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from telebot.async_telebot import AsyncTeleBot
from telebot import types
from collections import defaultdict
import maintenance
from db import (
    init_db, get_user, add_user, update_user,
    USERS_CACHE, load_users_cache, refresh_users_cache_periodically,
    upsert_user_in_cache, has_active_subscription
)
from config import TELEGRAM_TOKEN, SPREAD_THRESHOLD_PERCENT, PRICE_CHECK_INTERVAL, ADMINS, ALERT_COOLDOWN_MINUTES, SPREAD_CHANGE_THRESHOLD
from utils import normalize_and_match, load_exceptions
from fetchers.mexc import get_mexc_spot_prices, get_mexc_futures_prices, get_mexc_status
from fetchers.bitget import get_bitget_futures_prices, get_bitget_status
from fetchers.bingx import get_bingx_spot_prices, get_bingx_status
from fetchers.gate import get_gate_futures_prices, get_gate_status
from fetchers.binance import get_binance_futures_prices, get_trading_symbols, get_binance_status

# ---------- –õ–û–ì–ò (–µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–æ—Ç–∞—Ü–∏—è, 7 –¥–Ω–µ–π) ----------
log_formatter = logging.Formatter(
    fmt="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S"
)
logging.basicConfig(level=logging.INFO, force=True)
handler = TimedRotatingFileHandler(
    filename="bot.log",
    when="midnight",
    interval=1,
    backupCount=7,
    encoding="utf-8",
    utc=True
)
handler.setFormatter(log_formatter)
root_logger = logging.getLogger()
root_logger.addHandler(handler)
# –ø—Ä–∏–≥–ª—É—à–∞–µ–º —Å–ª–∏—à–∫–æ–º –±–æ–ª—Ç–ª–∏–≤—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
logging.getLogger("apscheduler").setLevel(logging.WARNING)
logging.getLogger("telebot").setLevel(logging.WARNING)
logger = logging.getLogger("bot")

def ensure_utc(dt: datetime | None) -> datetime | None:
    if dt is None:
        return None
    if not isinstance(dt, datetime):
        try:
            dt = datetime.fromisoformat(str(dt))
        except Exception:
            return None
    if dt.tzinfo is None:
        return dt.replace(tzinfo=timezone.utc)
    return dt.astimezone(timezone.utc)

# ---------- –ë–û–¢ ----------
bot = AsyncTeleBot(TELEGRAM_TOKEN)
# –æ–≥—Ä–∞–Ω–∏—á–∏–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫ Telegram (–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)
SEND_SEMAPHORE = asyncio.Semaphore(20)

# ---------- –†–´–ù–ö–ò ----------
MARKETS = {
    "mexc_spot": {"type": "spot", "fetch": get_mexc_spot_prices},
    "mexc_fut": {"type": "fut",  "fetch": get_mexc_futures_prices},
    "bitget_fut": {"type": "fut", "fetch": get_bitget_futures_prices},
    "gate_fut": {"type": "fut",   "fetch": get_gate_futures_prices},
    "binance_fut": {"type": "fut","fetch": get_binance_futures_prices},
    "bingx_spot": {"type": "spot","fetch": get_bingx_spot_prices},
}

EXCHANGE_NAMES = {
    "mexc_spot": "MEXC Spot",
    "mexc_fut": "MEXC Futures",
    "bitget_fut": "Bitget Futures",
    "gate_fut": "Gate Futures",
    "binance_fut": "Binance Futures",
    "bingx_spot": "BingX Spot",
}

# ---------- –°–¢–ê–¢–£–°–´ –î–ï–ü–û–ó–ò–¢/–í–´–í–û–î ----------
EXCHANGE_STATUS_FUNCS = {
    "bitget_fut": get_bitget_status,
    "gate_fut": get_gate_status,
    "bingx_spot": get_bingx_status,
    "binance_fut": get_binance_status,
    "mexc_spot": get_mexc_status,
    "mexc_fut": get_mexc_status,
}

async def get_symbol_status(exchange_key: str, symbol: str):
    func = EXCHANGE_STATUS_FUNCS.get(exchange_key)
    if not func:
        return False, False
    try:
        return await func(symbol)
    except Exception as e:
        logger.warning(f"get_symbol_status failed for {exchange_key} {symbol}: {e}")
        return False, False


# ---------- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï ----------
def main_menu_markup():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–Ω–µ—Ç—É"))
    markup.add(types.KeyboardButton("‚öôÔ∏è –§–∏–ª—å—Ç—Ä—ã"))
    markup.add(types.KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å"))
    markup.add(types.KeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ"))
    return markup

async def show_main_menu(chat_id: int):
    await bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_markup())

def passes_filter(spread: float, user_filter: str | None) -> bool:
    if user_filter == "5-12%":
        return 5 <= spread < 12
    elif user_filter == "12-19%":
        return 12 <= spread < 19
    elif user_filter == "19%+":
        return spread >= 19
    return spread >= SPREAD_THRESHOLD_PERCENT

async def has_access(user_id: int) -> bool:
    # –∞–¥–º–∏–Ω—ã –≤—Å–µ–≥–¥–∞ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø
    if user_id in ADMINS:
        return True

    info = USERS_CACHE.get(user_id)
    if not info:
        return False
    if int(info.get("subscription") or 0) == 1:
        return True
    trial_end = ensure_utc(info.get("trial_end"))
    if trial_end:
        now = datetime.now(timezone.utc)
        return now <= trial_end
    return False

async def remaining_trial_text(user_id: int) -> str:
    user = await get_user(user_id)
    if not user:
        return "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"

    await upsert_user_in_cache(user)

    if int(user.subscription or 0) == 1:
        return ""

    trial_end = ensure_utc(user.trial_end)
    if trial_end:
        now = ensure_utc(datetime.now(timezone.utc))
        if now <= trial_end:
            left = trial_end - now
            total = int(left.total_seconds())
            days = total // 86400
            hours = (total % 86400) // 3600
            minutes = (total % 3600) // 60
            return f"‚è≥ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø: {days} –¥–Ω {hours} —á {minutes} –º–∏–Ω"

    return "‚ùå –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏—Å—Ç—ë–∫"

async def safe_send(user_id: int, text: str, **kwargs):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–µ–º–∞—Ñ–æ—Ä–æ–º, –±–µ–∑ –ø–æ–¥–Ω—è—Ç–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –Ω–∞—Ä—É–∂—É."""
    try:
        async with SEND_SEMAPHORE:
            await bot.send_message(user_id, text, **kwargs)
    except Exception as e:
        logger.warning(f"send_message to {user_id} failed: {e}")

# ---------- –ü–û–õ–£–ß–ï–ù–ò–ï –¶–ï–ù ----------
async def safe_fetch(name, func):
    try:
        data = await func()
        return name, data
    except Exception as e:
        logger.warning(f"[WARN] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å {name}: {e}")
        return name, None

async def fetch_all_prices():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å {source_name: prices_dict} - –≥–¥–µ prices_dict –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º {}.
    –í–∞–∂–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–ª—å—Ç—Ä result is not None (None –∑–Ω–∞—á–∏—Ç –æ—à–∏–±–∫–∞), –ø—É—Å—Ç–æ–π dict - –¥–æ–ø—É—Å—Ç–∏–º–æ.
    """
    tasks = [safe_fetch(name, info["fetch"]) for name, info in MARKETS.items()]
    results = await asyncio.gather(*tasks)
    return {name: result for name, result in results if result is not None}

def filter_valid_symbols(prices: dict):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ —Å–∏–º–≤–æ–ª—ã, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö:
      - –µ—Å—Ç—å >=1 futures –∏ >=1 spot (spot ‚Üî fut)
      OR
      - –µ—Å—Ç—å >=2 futures (fut ‚Üî fut)
    –ü—Ä–æ–ø—É—Å–∫–∞–µ–º spot‚Üîspot.
    """
    filtered = {}
    for symbol, markets in prices.items():
        types_map = {}
        for src in markets.keys():
            t = MARKETS.get(src, {}).get("type")
            types_map.setdefault(t, []).append(src)

        futures_sources = types_map.get("fut", [])
        spot_sources = types_map.get("spot", [])

        # fut-fut
        if len(futures_sources) >= 2:
            filtered[symbol] = markets
            continue
        # spot-fut
        if len(futures_sources) >= 1 and len(spot_sources) >= 1:
            filtered[symbol] = markets
            continue
        # –æ—Å—Ç–∞–ª—å–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä —Ç–æ–ª—å–∫–æ spot) ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    return filtered

# ---------- –õ–û–ì –°–ü–†–ï–î–û–í (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ----------
LOG_FILE = "spreads_log.txt"

async def log_random_spreads_to_file(prices: dict, sample_size: int = 30):
    try:
        if not prices:
            with open(LOG_FILE, "w", encoding="utf-8") as f:
                f.write("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–Ω–µ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.\n")
            return
        symbols = list(prices.keys())
        if len(symbols) > sample_size:
            symbols = random.sample(symbols, sample_size)
        lines = [f"üìä –õ–æ–≥ {len(symbols)} —Å–ª—É—á–∞–π–Ω—ã—Ö –º–æ–Ω–µ—Ç:"]
        for symbol in symbols:
            data = prices[symbol]
            sources = list(data.keys())
            lines.append(f"\n{symbol}:")
            for i in range(len(sources)):
                for j in range(i + 1, len(sources)):
                    src1, src2 = sources[i], sources[j]
                    t1, t2 = MARKETS[src1]["type"], MARKETS[src2]["type"]
                    if t1 == "spot" and t2 == "spot":
                        continue
                    p1, p2 = data[src1], data[src2]
                    if not p1 or not p2:
                        continue
                    spread = abs(p1 - p2) / ((p1 + p2) / 2) * 100
                    lines.append(f"{EXCHANGE_NAMES.get(src1, src1)} vs {EXCHANGE_NAMES.get(src2, src2)}: {spread:.2f}%")
        with open(LOG_FILE, "w", encoding="utf-8") as f:
            f.write("\n".join(lines))
    except Exception as e:
        logger.warning(f"write log failed: {e}")

# ---------- –ê–õ–ï–†–¢–´ ----------
LAST_ALERTS = {}  # {user_id: {symbol: datetime}}

# ---------- –ê–õ–ï–†–¢–´ (—Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º) ----------
async def _check_and_alert():
    logger.info("START _check_and_alert")
    start_time = time.time()
    total_pairs = 0
    sent_count = 0
    max_spread = 0.0
    top_spreads = []  # list of tuples (spread, symbol, src1, src2, p1, p2)

    try:
        raw = await fetch_all_prices()
        try:
            loaded_counts = {k: (len(v) if v else 0) for k, v in raw.items()}
        except Exception:
            loaded_counts = {}
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {sum(loaded_counts.values())} –º–æ–Ω–µ—Ç c {len(raw)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤; –¥–µ—Ç–∞–ª–∏: {loaded_counts}")

        try:
            prices = normalize_and_match(raw)
            logger.info(f"–ü–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏: {len(prices)} –º–æ–Ω–µ—Ç")
        except Exception as e:
            logger.warning(f"normalize_and_match failed: {e}")
            prices = {}

        prices = filter_valid_symbols(prices)
        logger.info(f"–ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–∞—Ä—ã —Ä—ã–Ω–∫–æ–≤): {len(prices)} –º–æ–Ω–µ—Ç")

        if not prices:
            logger.info("No valid prices found")
            return

        await log_random_spreads_to_file(prices)

        try:
            users_snapshot = list(USERS_CACHE.items())
            logger.info(f"USERS_CACHE size: {len(USERS_CACHE)}")
            for uid, uinfo in users_snapshot[:10]:
                logger.info(f"USERS_CACHE sample -> {uid}: {uinfo}")
        except Exception as e:
            logger.warning(f"Cannot dump USERS_CACHE: {e}")

        send_tasks = []
        url_map = {
            "mexc_spot": "https://www.mexc.com/exchange/{symbol}_USDT",
            "binance_fut": "https://www.binance.com/en/futures/{symbol}USDT",
            "bitget_fut": "https://www.bitget.com/en/futures/{symbol}USDT",
            "gate_fut": "https://www.gate.com/en/futures/USDT/{symbol}_USDT",
            "bingx_spot": "https://bingx.com/spot/{symbol}USDT",
            "mexc_fut": "https://www.mexc.com/futures/{symbol}_USDT?type=linear_swap",
        }

        for symbol, data in prices.items():
            sources = list(data.keys())
            for i in range(len(sources)):
                for j in range(i + 1, len(sources)):
                    src1, src2 = sources[i], sources[j]
                    t1, t2 = MARKETS[src1]["type"], MARKETS[src2]["type"]
                    if t1 == "spot" and t2 == "spot":
                        continue
                    p1, p2 = data[src1], data[src2]
                    if not p1 or not p2:
                        continue

                    spread = abs(p1 - p2) / ((p1 + p2) / 2) * 100
                    total_pairs += 1
                    if spread > max_spread:
                        max_spread = spread
                    top_spreads.append((spread, symbol, src1, src2, p1, p2))

                    if spread < SPREAD_THRESHOLD_PERCENT:
                        continue

                    for user_id, info in list(USERS_CACHE.items()):
                        try:
                            access = await has_access(user_id)
                        except Exception as e:
                            logger.warning(f"has_access failed for user {user_id}: {e}")
                            access = False

                        if not access:
                            logger.debug(f"[{symbol}] user {user_id} ‚Äî –¥–æ—Å—Ç—É–ø –Ω–µ—Ç")
                            continue

                        if int(info.get("notify", 1)) == 0:
                            logger.debug(f"[{symbol}] user {user_id} ‚Äî notify=0, –ø—Ä–æ–ø—É—Å–∫")
                            continue

                        user_filter = info.get("filter")
                        if not passes_filter(spread, user_filter):
                            logger.debug(f"[{symbol}] user {user_id} ‚Äî —Ñ–∏–ª—å—Ç—Ä –Ω–µ –ø—Ä–æ—à—ë–ª ({user_filter})")
                            continue

                        if "collected_spreads" not in info:
                            info["collected_spreads"] = {}
                        if symbol not in info["collected_spreads"]:
                            info["collected_spreads"][symbol] = []
                        info["collected_spreads"][symbol].append({
                            "spread": spread,
                            "src1": src1,
                            "src2": src2,
                            "p1": p1,
                            "p2": p2,
                            "url1": url_map[src1].format(symbol=symbol),
                            "url2": url_map[src2].format(symbol=symbol),
                        })

            # --- –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ---
            for user_id, info in list(USERS_CACHE.items()):
                if int(info.get("notify", 1)) == 0:
                    continue

                if "collected_spreads" in info and symbol in info["collected_spreads"]:
                    entries = info["collected_spreads"][symbol]
                    spread_percent = entries[0]["spread"]

                    now = datetime.now(timezone.utc)
                    last_alert = LAST_ALERTS.get(user_id, {}).get(symbol)
                    should_send = True

                    if last_alert:
                        last_time, last_spread = last_alert
                        if (now - last_time) < timedelta(minutes=ALERT_COOLDOWN_MINUTES):
                            should_send = False
                        elif last_spread is not None and abs(spread_percent - last_spread) < SPREAD_CHANGE_THRESHOLD:
                            should_send = False

                    if should_send:
                        text = f"–ú–æ–Ω–µ—Ç–∞: <b>{symbol}</b>\n\n"
                        for e in entries:
                            dep1, wdr1 = await get_symbol_status(e["src1"], symbol)
                            dep2, wdr2 = await get_symbol_status(e["src2"], symbol)

                            text += (
                                f'<a href="{e["url1"]}">{EXCHANGE_NAMES.get(e["src1"], e["src1"])}</a> üîÑ '
                                f'<a href="{e["url2"]}">{EXCHANGE_NAMES.get(e["src2"], e["src2"])}</a>\n'
                                f'üìà –°–ø—Ä–µ–¥: {e["spread"]:.2f}%\n'
                                f'üí∞ {EXCHANGE_NAMES.get(e["src1"], e["src1"])}: {e["p1"]:.6f}\n'
                                f'üí∞ {EXCHANGE_NAMES.get(e["src2"], e["src2"])}: {e["p2"]:.6f}\n\n'
                                f'–î–µ–ø–æ–∑–∏—Ç: {"‚úÖ" if dep1 or dep2 else "‚ùå"}\n'
                                f'–í—ã–≤–æ–¥: {"‚úÖ" if wdr1 or wdr2 else "‚ùå"}\n\n'
                            )

                        text += f"üîñ –¢–∏–∫–µ—Ä: <code>{symbol}</code>"

                        send_tasks.append(
                            safe_send(
                                user_id,
                                text,
                                parse_mode="HTML",
                                disable_web_page_preview=True
                            )
                        )
                        sent_count += 1
                        if user_id not in LAST_ALERTS:
                            LAST_ALERTS[user_id] = {}
                        LAST_ALERTS[user_id][symbol] = (now, spread_percent)
                        logger.info(f"[{symbol}] user {user_id} ‚Äî –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å {len(entries)} —Å–ø—Ä–µ–¥–∞–º–∏")
                    else:
                        logger.debug(f"[{symbol}] user {user_id} ‚Äî –∫—É–ª–¥–∞—É–Ω –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ < {SPREAD_CHANGE_THRESHOLD}% ‚Üí –ø—Ä–æ–ø—É—Å–∫")

                    info["collected_spreads"].pop(symbol, None)

        if sent_count == 0:
            try:
                top_spreads_sorted = sorted(top_spreads, key=lambda x: x[0], reverse=True)[:20]
                logger.info("Top spreads (top 20) ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏—á–∏–Ω—ã –Ω–µ–ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:")
                for s, sym, a, b, p1, p2 in top_spreads_sorted:
                    logger.info(f"{sym} {a} vs {b}: {s:.2f}% ‚Äî {p1:.6f} / {p2:.6f}")
                logger.info(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ –≤ –ø—Ä–æ—Ö–æ–¥–µ: {max_spread:.2f}%")
            except Exception as e:
                logger.warning(f"Failed to log top spreads: {e}")

        if send_tasks:
            results = await asyncio.gather(*send_tasks, return_exceptions=True)
            for res in results:
                if isinstance(res, Exception):
                    logger.warning(f"Error in send task: {res}")

    except Exception as e:
        logger.exception(f"_check_and_alert failed: {e}")
    finally:
        elapsed = round(time.time() - start_time, 2)
        logger.info(f"END _check_and_alert | –ø–∞—Ä –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {total_pairs}, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å: {sent_count}, –≤—Ä–µ–º—è: {elapsed} —Å–µ–∫.")


# ---------- –•–≠–ù–î–õ–ï–†–´ ----------
user_states = {}  # {user_id: "waiting_for_coin"}

@bot.message_handler(commands=["start"])
async def handle_start(message):
    user_id = message.chat.id

    # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ë–î ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º
    user = await get_user(user_id)
    if not user:
        user = await add_user(user_id)

    # –µ—Å–ª–∏ –∞–¥–º–∏–Ω ‚Äî –≤—Å–µ–≥–¥–∞ —Å—Ç–∞–≤–∏–º –ø–æ–¥–ø–∏—Å–∫—É = 1
    if user_id in ADMINS:
        await update_user(user_id, subscription=1)

    # –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤–∞–∂–Ω–æ –≤—Å–µ–≥–¥–∞ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    await load_users_cache()

    # –õ–û–ì–ò–†–û–í–ê–ù–ò–ï USERS_CACHE –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    try:
        users_snapshot = list(USERS_CACHE.items())
        logger.info(f"[/start] USERS_CACHE –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –∫–æ–º–∞–Ω–¥—ã: {len(USERS_CACHE)} –∑–∞–ø–∏—Å–µ–π.")
        for uid, uinfo in users_snapshot[:10]:
            logger.info(f"[/start] sample -> {uid}: {uinfo}")
    except Exception as e:
        logger.warning(f"[/start] Cannot dump USERS_CACHE: {e}")
    await bot.send_message(
        user_id,
        "–ü—Ä–∏–≤–µ—Ç! üëã\n–Ø –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é —Å–ø—Ä–µ–¥—ã –∫—Ä–∏–ø—Ç–æ–º–æ–Ω–µ—Ç.\n–ü–µ—Ä–≤—ã–π –¥–µ–Ω—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π!"
    )
    await show_main_menu(user_id)

@bot.message_handler(func=lambda m: True)
async def main_menu_handler(message):
    user_id = message.chat.id
    text = (message.text or "").strip()
    logger.warning(f"[DEBUG MESSAGE FLOW] user_id={user_id}, text='{text}', repr={repr(text)}")

    # --- –∫–æ–º–∞–Ω–¥–∞ /approve (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤) ---
    if text.startswith("/approve"):
        if user_id not in ADMINS:
            await bot.send_message(user_id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        args = text.split()
        if len(args) < 2:
            await bot.send_message(user_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /approve <user_id>")
            return
        try:
            target_id = int(args[1])
            new_trial = datetime.now(timezone.utc) + timedelta(days=30)
            await update_user(target_id, subscription=1, trial_end=new_trial)

            USERS_CACHE[target_id] = {
                **USERS_CACHE.get(target_id, {}),
                "subscription": 1,
                "trial_end": new_trial,
            }

            # —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
            await bot.send_message(
                user_id,
                f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ "
                f"{new_trial.strftime('%Y-%m-%d %H:%M:%S UTC')}"
            )

            # —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                await bot.send_message(
                    target_id,
                    f"‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ "
                    f"{new_trial.strftime('%Y-%m-%d %H:%M:%S UTC')}"
                )
            except Exception:
                pass
        except ValueError:
            await bot.send_message(user_id, "user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return  # –≤—ã—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É, –Ω–µ –∏–¥—ë–º –¥–∞–ª—å—à–µ

    # --- –µ—Å–ª–∏ –∂–¥—ë–º –º–æ–Ω–µ—Ç—É ---
    if user_states.get(user_id) == "waiting_for_coin":
        symbol_query = text.upper()
        user_states[user_id] = None
        await check_symbol_prices(user_id, symbol_query)
        return

    # –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏
    allowed_wo_access = {"üë§ –ü—Ä–æ—Ñ–∏–ª—å", "‚ÑπÔ∏è –û –±–æ—Ç–µ"}

    if text not in allowed_wo_access and text not in {
        "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–Ω–µ—Ç—É", 
        "‚öôÔ∏è –§–∏–ª—å—Ç—Ä—ã", 
        "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
        "5-12%", "12-19%", "19%+",
        "‚õî –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "‚ñ∂Ô∏è –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
        "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", "‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª"
    }:
        await show_main_menu(user_id)
        return

    if text == "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–Ω–µ—Ç—É":
        if not await has_access(user_id):
            await bot.send_message(user_id, "‚õî –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω. –ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.")
            return
        user_states[user_id] = "waiting_for_coin"
        await bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, TRUMP):")

    elif text == "‚öôÔ∏è –§–∏–ª—å—Ç—Ä—ã":
        if not await has_access(user_id):
            await bot.send_message(user_id, "‚õî –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω. –ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.")
            return
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("5-12%"), types.KeyboardButton("12-19%"), types.KeyboardButton("19%+"))
        markup.add(types.KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))
        await bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä —Å–ø—Ä–µ–¥–∞:", reply_markup=markup)
        return

    elif text in {"5-12%", "12-19%", "19%+"}:
        new_filter = text.strip()
        logger.info(f"[–§–ò–õ–¨–¢–† DEBUG] user_id={user_id} –≤—ã–±—Ä–∞–ª —Ñ–∏–ª—å—Ç—Ä {new_filter}")
        await update_user(user_id, filter=new_filter)
        await load_users_cache()
        logger.info(f"[–§–ò–õ–¨–¢–† DEBUG] USERS_CACHE[{user_id}] -> {USERS_CACHE.get(user_id)}")
        await bot.send_message(user_id, f"‚úÖ –§–∏–ª—å—Ç—Ä —Å–ø—Ä–µ–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {new_filter}")
        await show_main_menu(user_id)

    elif text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å":
        user = await get_user(user_id)
        if not user:
            await bot.send_message(user_id, "–Ø –≤–∞—Å –Ω–µ –Ω–∞—à—ë–ª –≤ –±–∞–∑–µ. –ù–∞–∂–º–∏—Ç–µ /start")
            return
        sub_status = "–Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ ‚ùå"
        trial_end = ensure_utc(getattr(user, "trial_end", None))
        if (user.subscription or 0) == 1:
            if trial_end:
                trial_end_str = trial_end.astimezone(timezone.utc).strftime("%Y-%m-%d %H:%M:%S UTC")
                sub_status = f"–∞–∫—Ç–∏–≤–Ω–∞ ‚úÖ (–¥–æ {trial_end_str})"
            else:
                sub_status = "–∞–∫—Ç–∏–≤–Ω–∞ ‚úÖ"
        else:
            trial_info = await remaining_trial_text(user_id)
            if trial_info:
                sub_status += f"\n{trial_info}"

        reg_date = ensure_utc(user.registered or datetime.now(timezone.utc)).strftime("%Y-%m-%d %H:%M:%S UTC")

        lines = [
            "üìã –ü—Ä–æ—Ñ–∏–ª—å:",
            f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {reg_date}",
            f"–ü–æ–¥–ø–∏—Å–∫–∞: {sub_status}",
            f"–§–∏–ª—å—Ç—Ä: {user.filter_value or '–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é'}"
        ]

        notif_raw = getattr(user, 'notify', None)
        notif = 1 if notif_raw is None else int(notif_raw)
        lines.append('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ‚úÖ –≤–∫–ª—é—á–µ–Ω—ã' if notif == 1 else '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ‚õî –æ—Ç–∫–ª—é—á–µ–Ω—ã')

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        toggle_text = "‚õî –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" if notif == 1 else "‚ñ∂Ô∏è –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
        markup.add(types.KeyboardButton(toggle_text))
        markup.add(types.KeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å"))
        markup.add(types.KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))

        await bot.send_message(user_id, "\n".join(lines), reply_markup=markup)

    elif text in {"‚õî –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "‚ñ∂Ô∏è –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"}:
        user = await get_user(user_id)
        cur_raw = getattr(user, 'notify', None)
        current = 1 if cur_raw is None else int(cur_raw)
        new_val = 0 if text.startswith("‚õî") else 1
        if new_val != current:
            await update_user(user_id, notify=new_val)
            await load_users_cache()
        state = "–æ—Ç–∫–ª—é—á–µ–Ω—ã ‚õî" if new_val == 0 else "–≤–∫–ª—é—á–µ–Ω—ã ‚úÖ"
        await bot.send_message(user_id, f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {state}. –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –ü—Ä–æ—Ñ–∏–ª–µ.")

    elif text == "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª"))
        markup.add(types.KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"))
        await bot.send_message(
            user_id,
            "üí≥ –î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ 40 USDT (TRC20) –Ω–∞ –∫–æ—à–µ–ª—ë–∫:\n\n"
            "<code>TMQPxZoa5yeghDPTUi3feLrcCCzC4ZkZuc</code>\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª¬ª.",
            reply_markup=markup,
            parse_mode="HTML"
        )

    elif text == "‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await bot.send_message(
            user_id,
            "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n"
            "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –æ–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
        )
        await show_main_menu(user_id)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤
        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–±—è (–±–µ–∑ —Ü–∏–∫–ª–∞)
        try:
            await bot.send_message(
                1879112903,  # <-- —Ç–≤–æ–π Telegram ID
                f"üí≥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({message.from_user.first_name}) "
                f"–Ω–∞–∂–∞–ª ¬´–Ø –æ–ø–ª–∞—Ç–∏–ª¬ª. –ü—Ä–æ–≤–µ—Ä—å –æ–ø–ª–∞—Ç—É –∏, –µ—Å–ª–∏ –≤—Å—ë –æ–∫, –∞–∫—Ç–∏–≤–∏—Ä—É–π –ø–æ–¥–ø–∏—Å–∫—É:\n\n"
                f"<code>/approve {user_id}</code>",
                parse_mode="HTML"
            )
        except Exception:
            pass


    elif text == "‚ÑπÔ∏è –û –±–æ—Ç–µ":
        await bot.send_message(user_id, "‚ÑπÔ∏è –Ø –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é —Å–ø—Ä–µ–¥—ã –º–µ–∂–¥—É —Å–ø–æ—Ç–æ–º –∏ —Ñ—å—é—á–µ—Ä—Å–∞–º–∏ —Ä–∞–∑–Ω—ã—Ö –±–∏—Ä–∂.")
        await show_main_menu(user_id)

    elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        await show_main_menu(user_id)

    else:
        await show_main_menu(user_id)


# –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–Ω–µ—Ç—ã
def process_check_symbol(message):
    symbol_query = (message.text or "").strip().upper()
    asyncio.create_task(check_symbol_prices(message.chat.id, symbol_query))

async def check_symbol_prices(chat_id: int, symbol_query: str):
    if not await has_access(chat_id):
        await bot.send_message(chat_id, "‚õî –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω. –ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.")
        return

    raw_prices = await fetch_all_prices()
    prices = normalize_and_match(raw_prices)
    prices = filter_valid_symbols(prices)

    matches = {k: v for k, v in prices.items() if k == symbol_query}
    if not matches:
        exceptions = load_exceptions()
        # –µ—Å–ª–∏ –≤ exceptions –ø—Ä–æ–ø–∏—Å–∞–Ω–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞
        if symbol_query in exceptions and symbol_query in prices:
            matches[symbol_query] = prices[symbol_query]

    if not matches:
        await bot.send_message(chat_id, f"‚ùå –ú–æ–Ω–µ—Ç–∞ {symbol_query} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç –Ω—É–∂–Ω—ã—Ö —Ä—ã–Ω–∫–æ–≤ (spot/fut).")
        return

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    for symbol, data in matches.items():
        msg_lines = [f"üìä <b>{symbol}</b>"]

    # –¶–µ–Ω—ã
    for src in data.keys():
        msg_lines.append(f"<b>{EXCHANGE_NAMES.get(src, src)}:</b> {data[src]:.3f}")

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ø—Ä–µ–¥–æ–≤
    msg_lines.append("\nüíπ <b>–°–ü–†–ï–î–´</b> üíπ")

    sources = list(data.keys())
    for i in range(len(sources)):
        for j in range(i + 1, len(sources)):
            src1, src2 = sources[i], sources[j]
            t1, t2 = MARKETS[src1]["type"], MARKETS[src2]["type"]
            if t1 == "spot" and t2 == "spot":
                continue
            p1, p2 = data[src1], data[src2]
            if not p1 or not p2:
                continue
            spread = abs(p1 - p2) / ((p1 + p2) / 2) * 100
            msg_lines.append(
                f"{EXCHANGE_NAMES.get(src1, src1)} vs {EXCHANGE_NAMES.get(src2, src2)}: <b>{spread:.2f}%</b>"
            )

    # –¢–∏–∫–µ—Ä (–∫–æ–ø–∏—Ä—É–µ–º—ã–π)
    msg_lines.append(f"\nüîñ –¢–∏–∫–µ—Ä –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: <code>{symbol}</code>")

    await bot.send_message(chat_id, "\n".join(msg_lines), parse_mode="HTML")


# ---------- –ó–ê–ü–£–°–ö ----------
async def main():
    await init_db()

    # –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫—ç—à
    await load_users_cache()

    # –õ–û–ì–ò–†–û–í–ê–ù–ò–ï USERS_CACHE —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    try:
        users_snapshot = list(USERS_CACHE.items())
        logger.info(f"[main] USERS_CACHE –∑–∞–≥—Ä—É–∂–µ–Ω: {len(USERS_CACHE)} –∑–∞–ø–∏—Å–µ–π.")
        for uid, uinfo in users_snapshot[:10]:
            logger.info(f"[main] sample -> {uid}: {uinfo}")
    except Exception as e:
        logger.warning(f"[main] Cannot dump USERS_CACHE: {e}")
    # –≤–∫–ª—é—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∞–¥–º–∏–Ω–∞–º
    for admin_id in ADMINS:
        await update_user(admin_id, subscription=1)

    # –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ (–≤ —Ñ–æ–Ω–µ)
    asyncio.create_task(refresh_users_cache_periodically(300))

    # –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    scheduler = AsyncIOScheduler(timezone=timezone.utc)
    scheduler.add_job(
        _check_and_alert,
        "interval",
        seconds=PRICE_CHECK_INTERVAL,
        coalesce=True,
        max_instances=1,
        misfire_grace_time=30,
        id="check_and_alert"
    )
    await maintenance.start_background_tasks(bot)
    scheduler.start()

    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    await bot.infinity_polling(skip_pending=True)

if __name__ == "__main__":
    asyncio.run(main())